# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/memoizable/all/memoizable.rbi
#
# memoizable-0.4.2

module Memoizable
  def self.included(descendant); end
  include Memoizable::InstanceMethods
end
module Memoizable::InstanceMethods
  def freeze; end
  def memoize(data); end
  def memoized_method_cache; end
end
class Memoizable::MethodBuilder
  def assert_arity(arity); end
  def call; end
  def create_memoized_method; end
  def initialize(descendant, method_name, freezer); end
  def original_method; end
  def remove_original_method; end
  def set_method_visibility; end
  def visibility; end
end
class Memoizable::MethodBuilder::InvalidArityError < ArgumentError
  def initialize(descendant, method, arity); end
end
class Memoizable::MethodBuilder::BlockNotAllowedError < ArgumentError
  def initialize(descendant, method); end
end
module Memoizable::ModuleMethods
  def freezer; end
  def included(descendant); end
  def memoize(*methods); end
  def memoize_method(method_name); end
  def memoized?(name); end
  def memoized_methods; end
  def unmemoized_instance_method(name); end
end
class Memoizable::Memory
  def [](name); end
  def []=(name, value); end
  def fetch(name); end
  def initialize; end
  def key?(name); end
  def marshal_dump; end
  def marshal_load(hash); end
end
